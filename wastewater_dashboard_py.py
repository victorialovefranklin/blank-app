# -*- coding: utf-8 -*-
"""wastewater_dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1213UiHvx_-NjWM3X5cZ_pgEz1GJ8gcsh
"""

pip install streamlit matplotlib pandas statsmodels

import streamlit as st
import pandas as pd
import plotly.graph_objs as go
from statsmodels.tsa.seasonal import seasonal_decompose
import io

# === Title and Intro ===
st.set_page_config(page_title="COVID Wastewater Dashboard", layout="wide")
st.title("🧪 COVID-19 Wastewater Trend Decomposition Dashboard")
st.markdown("""
This dashboard visualizes **COVID-19 Wastewater Viral Activity Levels (WVAL)** and decomposes them into **Observed**, **Trend**, **Seasonality**, and **Residuals**.
""")

# === File Upload ===
uploaded_file = st.file_uploader("📁 Upload a COVID Wastewater CSV file", type="csv")
if not uploaded_file:
    st.info("Waiting for file upload... Or update the path to use local test data.")
    st.stop()

# === Load and Prepare Data ===
try:
    df = pd.read_csv(uploaded_file, parse_dates=["Week_Ending_Date"])
    all_states = df['State/Territory'].dropna().unique().tolist()
    all_states.sort()

    # === Sidebar Filters ===
    st.sidebar.header("🧭 Filters")
    selected_states = st.sidebar.multiselect("Select State(s) or Territory", options=all_states, default=["Tennessee"])
    min_date = df["Week_Ending_Date"].min()
    max_date = df["Week_Ending_Date"].max()
    start_date, end_date = st.sidebar.date_input("Select Date Range", [min_date, max_date], min_value=min_date, max_value=max_date)

    # === Process Each Selected State/Territory ===
    for state in selected_states:
        st.subheader(f"📍 {state}: WVAL Decomposition")

        # === Filter Data ===
        state_df = df[(df["State/Territory"] == state) &
                      (df["Week_Ending_Date"] >= pd.to_datetime(start_date)) &
                      (df["Week_Ending_Date"] <= pd.to_datetime(end_date))]

        state_df = state_df[['Week_Ending_Date', 'State/Territory_WVAL']].dropna()
        state_df = state_df.sort_values('Week_Ending_Date').set_index('Week_Ending_Date').resample('W-SUN').mean().interpolate(method='linear')

        if len(state_df) < 104:
            st.warning(f"⚠️ Not enough weekly records for {state} (minimum 104 required, found {len(state_df)}).")
            continue

        # === Decomposition ===
        decomposition = seasonal_decompose(state_df['State/Territory_WVAL'], model='additive', period=52)
        observed = decomposition.observed
        trend = decomposition.trend
        seasonal = decomposition.seasonal
        resid = decomposition.resid

        # === Plotly Interactive Graph ===
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=observed.index, y=observed, name='Observed', mode='lines+markers'))
        fig.add_trace(go.Scatter(x=trend.index, y=trend, name='Trend', mode='lines'))
        fig.add_trace(go.Scatter(x=seasonal.index, y=seasonal, name='Seasonality', mode='lines'))
        fig.add_trace(go.Scatter(x=resid.index, y=resid, name='Residuals', mode='lines'))
        fig.update_layout(title=f"{state} Decomposition (Additive Model)", xaxis_title='Date', yaxis_title='WVAL',
                          hovermode='x unified', template='plotly_white', height=600)
        st.plotly_chart(fig, use_container_width=True)

        # === Data Export Option ===
        st.markdown("### 📤 Export Decomposition Results to CSV")
        decomposition_df = pd.DataFrame({
            "Date": observed.index,
            "Observed": observed.values,
            "Trend": trend.values,
            "Seasonality": seasonal.values,
            "Residual": resid.values
        }).dropna()

        csv = decomposition_df.to_csv(index=False)
        st.download_button(label="📥 Download CSV", data=csv, file_name=f"{state}_decomposition.csv", mime="text/csv")

        # Optional: Show table
        with st.expander("🗂 View Decomposition Data Table"):
            st.dataframe(decomposition_df)

except Exception as e:
    st.error(f"❌ An error occurred while processing the data: {e}")

!streamlit run covid_wastewater_dashboard.py